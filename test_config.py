# test_config.py
import time
from playwright.sync_api import sync_playwright
from common.config import CDP_ENDPOINT, TIMEOUT
from common.utils import log_info, get_timestamp, ensure_dir

def test_cdp_connection():
    """Testa a conex√£o CDP e traz a janela do navegador para frente"""
    log_info("=== Iniciando teste de conex√£o CDP ===")
    
    try:
        # Conecta ao Chrome via CDP
        playwright = sync_playwright().start()
        browser = playwright.chromium.connect_over_cdp(CDP_ENDPOINT)
        log_info(f"Conectado ao CDP em: {CDP_ENDPOINT}")
        
        # Cria uma nova p√°gina
        page = browser.new_page()
        log_info("Nova p√°gina criada")
        
        # Define um timeout padr√£o
        page.set_default_timeout(TIMEOUT)
        
        # Abre uma p√°gina de teste
        test_url = "https://www.google.com"
        log_info(f"Navegando para: {test_url}")
        page.goto(test_url)
        
        # Verifica se a p√°gina carregou corretamente
        assert "Google" in page.title()
        log_info("P√°gina carregada com sucesso!")
        
        # Traz a janela do navegador para frente
        page.bring_front()
        log_info("Janela do navegador trazida para frente")
        
        # Tira um screenshot como evid√™ncia
        screenshots_dir = ensure_dir(Path("logs/screenshots"))
        screenshot_path = screenshots_dir / f"cdp_test_{get_timestamp()}.png"
        page.screenshot(path=str(screenshot_path))
        log_info(f"Screenshot salvo em: {screenshot_path}")
        
        # Aguarda 5 segundos para visualiza√ß√£o manual
        log_info("Aguardando 5 segundos para visualiza√ß√£o manual...")
        time.sleep(5)
        
        # Fecha a p√°gina (mas mant√©m o navegador aberto)
        page.close()
        log_info("P√°gina fechada (navegador permanece aberto)")
        
        print("\n‚úÖ Teste CDP conclu√≠do com sucesso!")
        print("üì∏ Screenshot salvo em:", screenshot_path)
        print("üåê Janela do navegador foi trazida para frente")
        
        return True
        
    except Exception as e:
        log_error(f"Erro no teste CDP: {str(e)}")
        print(f"\n‚ùå Falha no teste: {str(e)}")
        return False

if __name__ == "__main__":
    # Executa o teste
    success = test_cdp_connection()
    
    # Exibe mensagem final
    if success:
        print("\nüéâ Tudo funcionando! A conex√£o CDP est√° operacional.")
    else:
        print("\n‚ö†Ô∏è Verifique:")
        print("1. Se o Chrome CDP est√° aberto (atalho 'Chrome ‚Äì Work CDP')")
        print("2. Se a porta 9222 est√° acess√≠vel (tente abrir http://localhost:9222)")
        print("3. Se o arquivo .env cont√©m CDP_ENDPOINT=http://localhost:9222")